{
  "ConnectionStrings": {
    "DbConnection": "Data Source=LOQ-Omar\\SQLEXPRESS;Initial Catalog=Expenses;User ID=sa;Password=O@!1234FC6549;Trusted_Connection=true;TrustServerCertificate=True;"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "NLog": {
    "autoReload": true,
    "throwConfigExceptions": true,
    "default-wrapper": {
      "type": "AsyncWrapper",
      "overflowAction": "Block"
    },
    "targets": {
      "file": {
        "type": "File",
        "fileName": "${basedir}/${shortDate}-ExpensesApi.log",
        "archiveFileName": "${basedir}/archive-files/{#####}-ExpensesApi.log",
        "archiveEvery": "Day",
        "archiveAboveSize": "67108864",
        "archiveNumbering": "DateAndSequence",
        "maxArchiveFiles": "-1",
        "concurrentWrites": "false",
        "keepFileOpen": "true",
        "deleteOldFileOnStartup": "false",
        "createDirs": "true",
        "layout": {
          "type": "JsonLayout",
          "includeAllProperties": "true",
          "maxRecursionLimit": "10",
          "Attributes": [
            {
              "name": "time",
              "layout": "${longDate}"
            },
            {
              "name": "level",
              "layout": "${level:upperCase=true}"
            },
            {
              "name": "source",
              "layout": "${callsite}"
            },
            {
              "name": "message",
              "layout": "${message}"
            },
            {
              "name": "exception",
              "layout": "${exception:format=toString}"
            }
          ]
        }
      },
      "console": {
        "type": "LimitingWrapper",
        "interval": "00:00:01",
        "messageLimit": 100,
        "target": {
          "type": "ColoredConsole",
          "layout": "${longDate}|${event-properties:item=EventId_Id:whenEmpty=0}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}|${callsite}",
          "rowHighlightingRules": [
            {
              "condition": "level == LogLevel.Error",
              "foregroundColor": "Red"
            },
            {
              "condition": "level == LogLevel.Fatal",
              "foregroundColor": "Red",
              "backgroundColor": "White"
            }
          ]
        }
      }
    },
    "rules": [
      {
        "logger": "*",
        "minLevel": "Trace",
        "writeTo": "file, console"
      }
    ]
  },
  "AllowedHosts": "*"
}
